require 'avatar'
require 'avatar/source/file_column_source'
require 'avatar/source/source_chain'
require 'avatar/source/static_url_source'
require 'avatar/source/wrapper/rails_asset_source_wrapper'
require 'avatar/source/wrapper/string_substitution_source_wrapper'
require 'sized_gravatar_source'

# order:
# 1.  FileColumn(Profile#icon)
# 2.  Gravatar(Profile#email), with default
#       a RailsAssetSourceWrapper containing
#         a StringSubstitutionSourceWrapper containing
#           a StaticUrlSource ('/images/avatar_default_#{size}.png')
#
# Gravatar does not understand :small, :medium, and :big,
# so we must translate using SizedGravatarSource

default = Avatar::Source::Wrapper::RailsAssetSourceWrapper.new(
  Avatar::Source::Wrapper::StringSubstitutionSourceWrapper.new(
    Avatar::Source::StaticUrlSource.new('/images/avatar_default_#{size}.png'),
    {:size => :small}
  )
)


chain = Avatar::Source::SourceChain.new
chain << Avatar::Source::FileColumnSource.new(:icon)
chain << SizedGravatarSource.new(default, :email)

Avatar::source = chain

# Opening Avatar support to fall back to default in case no email configured for 
# kontact
require 'avatar/view/abstract_view_support'

module Avatar # :nodoc:
  module View # :nodoc:
    module ActionViewSupport
      
      # Generates an image_tag for the URL or path generated by
      # avatar_url_for(+person+, +avatar_options+).  Passes additional
      # tag options from +html_options+.  Returns an empty string
      # if +person+ is nil.
      #
      # Because this method uses <code>image_tag</code>, Sources
      # can generate paths instead of absolute URLs.
      def avatar_tag(person, avatar_options={}, html_options={})
        return "" if person.nil?
        url = avatar_url_for(person, avatar_options)
        return image_tag("avatar_default_#{avatar_options[:size]}.png") if url.nil?
        image_tag(url, html_options)
      end
      
    end
  end
end